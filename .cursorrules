START SPECIFICATION:
 Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `// ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.
- If you're unsure about the impact of a change, ask for clarification before proceeding.
- If you're unsure about the best way to implement a feature, ask for suggestions.

# Technical Specification

## System Overview
The system is a real-time multiplayer space-themed social deduction game built using Nuxt 3, Vue 3 Composition API, Nitro's WebSocket, Tailwind CSS and OpenAI API. The purpose of the system is to provide an engaging multiplayer experience where players must convince the captain they are human passengers while some may be androids. After several rounds of questions and answers, the captain must decide which escape pods to launch and which to leave behind. The main components include frontend Vue components, backend WebSocket services, and external APIs for additional functionalities.

### Main Components and Their Roles
- **Frontend Components**: Handle user interactions, display game states, and manage player inputs.
  - `components/NicknameModal.vue`: Handles player nickname input and validation.
  - `components/WelcomeScreen.vue`: Manages the initial screen where players can host or join a game.
  - `components/game/GameChat.vue`: Manages in-game chat functionality with question and answer rounds.
  - `components/game/Board.vue`: The main orchestrator component that provides layout for the game interface.
  - `components/game/StarfieldBackground.vue`: Manages the animated star background.
  - `components/game/CountdownTimer.vue`: Manages the game round timer and display.
  - `components/game/GameSidebar.vue`: Shows player list, scoreboard, and controls.
  - `components/game/CaptainDecisionModal.vue`: Interface for the captain to decide which pods to leave behind.
- **Backend Services**: Manage game logic, WebSocket connections, and real-time updates.
  - `server/ai-chat.js`: Handles AI-generated chat responses for android passengers.
  - `server/routes/_ws.js`: Manages WebSocket connections, room creation, and game state transitions.
- **Composables**: Manage game state and WebSocket logic.
  - `composables/useGame.js`: Centralizes game state management and WebSocket interactions.
- **Configuration Files**: Set up the development environment and project configurations.
  - `nuxt.config.ts`: Configures the Nuxt.js application.
  - `tailwind.config.js`: Configures TailwindCSS for the project.
  - `package.json`: Defines project dependencies and scripts.
  - `tsconfig.json`: Configures TypeScript for the project.

## Core Functionality
### Primary Features and Their Implementation
1. **Real-time Multiplayer Gameplay**
   - **Components**: `components/game/Board.vue` and its child components
   - **Functions**: 
     - `toggleReady`: Manages player readiness.
     - `onStartGame`: Starts the game if all conditions are met.
   - **Game Rounds**:
     - Question Round: Captain asks questions to determine who is human.
     - Answer Round: Players respond to questions.
     - Translation Round: AI-generated responses are processed and displayed.
   - **Data Models**: 
     - `clientCountdown`: Manages the countdown timer for game rounds.
     - `timerInterval`: Holds the interval ID for the countdown timer.
     - `isPlayerReady`: Determines if the player is ready.
     - `canStartGame`: Determines if the game can be started.

2. **Nickname Management**
   - **Components**: `components/NicknameModal.vue`
   - **Functions**: 
     - `save`: Validates and saves the nickname.
     - `close`: Closes the modal and emits an event.
   - **Data Models**: 
     - `nickname`: Holds the current nickname input.
     - `error`: Holds any validation error messages.

3. **Game Chat**
   - **Components**: `components/game/GameChat.vue`
   - **Functions**: 
     - `sendMessage`: Handles sending a chat message.
     - `formatTime`: Formats the timestamp of a message.
   - **Data Models**: 
     - `visibleMessages`: Filters messages to be displayed.

4. **Welcome Screen**
   - **Components**: `components/WelcomeScreen.vue`
   - **Functions**: 
     - `handleHostGame`: Hosts a new game room.
     - `handleJoinGame`: Joins an existing game room.
     - `openNicknameModal`: Opens the nickname modal.
   - **Data Models**: 
     - `currentView`: Determines the current view state.
     - `roomKey`: Holds the room key for joining a game.
     - `generatedRoomKey`: Holds the generated room key for hosting a game.

5. **WebSocket Management**
   - **Composables**: `composables/useGame.js`
   - **Functions**: 
     - `useGame`: Manages game state, WebSocket connection, and user interactions.
   - **Data Flow**: 
     - Manages connection status, error handling, game state, and messages.

6. **AI Chat Responses**
   - **Backend**: `server/ai-chat.js`
   - **Functions**: 
     - `generateAIResponse`: Sends a message to the OpenAI API to generate responses for android passengers.

7. **WebSocket Server Handling**
   - **Backend**: `server/routes/_ws.js`
   - **Functions**: 
     - `createRoom`: Initializes a new game room.
     - `startTranslationCountdown`: Starts a countdown timer for game rounds.
     - `processPendingMessages`: Processes pending messages and generates AI responses.
     - `broadcastToRoom`: Sends a message to all clients in a room.
     - `removeClientFromRoom`: Removes a client from a room and handles cleanup.

## Architecture
### Data Flow and Component Interaction
1. **User Interaction**:
   - Users interact with the frontend components (`GameChat.vue`, `NicknameModal.vue`, `WelcomeScreen.vue`, `Board.vue` and its child components) to perform actions like sending messages, setting nicknames, hosting/joining games, and playing the game.
   
2. **Frontend to Backend Communication**:
   - Frontend components emit events and call functions in `composables/useGame.js` to manage game state and WebSocket interactions.
   - `useGame` composable handles WebSocket connections, room management, and state updates.

3. **Backend Processing**:
   - WebSocket server (`server/routes/_ws.js`) receives messages from clients, processes them, and broadcasts updates to all clients in a room.
   - AI chat responses are generated by `server/ai-chat.js` and sent back to clients to simulate android passengers.

4. **Real-time Updates**:
   - WebSocket server manages real-time updates, ensuring all clients receive synchronized game states and messages.
   - Countdown timers and game round transitions are handled by the server and broadcasted to clients.

5. **Configuration and Setup**:
   - `nuxt.config.ts` configures the Nuxt.js application, enabling experimental WebSocket support and integrating TailwindCSS.
   - `tailwind.config.js` configures TailwindCSS to scan and style all project files.
   - `package.json` defines project dependencies and scripts for building, developing, and deploying the application.
   - `tsconfig.json` configures TypeScript for the project, ensuring compatibility with Nuxt.js.
END SPECIFICATION